                                        POSTGRE SQL SYNTAX

--SELECT STATEMENT
SELECT * 
FROM CUSTOMER;

SELECT FIRST_NAME, LAST_NAME, EMAIL
FROM CUSTOMER;

SELECT PAYMENT_ID, CUSTOMER_ID, AMOUNT, PAYMENT_DATE
FROM PAYMENT;

--LIMIT STATEMENT
SELECT *
FROM PAYMENT 
LIMIT 20;

SELECT ADDRESS_ID, ADDRESS, CITY_ID, PHONE
FROM ADDRESS
LIMIT 10;

SELECT DISTINCT(AMOUNT) 
FROM PAYMENT 
LIMIT 10;

SELECT SUM (DISTINCT AMOUNT)
FROM PAYMENT;

--CREATING TABLES
CREATE TABLE FILM_CHOICE(
	
CUSTOMER_ID CHAR(10) PRIMARY KEY NOT NULL,
FIRST_NAME VARCHAR(20) NOT NULL,
LAST_NAME VARCHAR(20) NOT NULL,
ADDRESS VARCHAR(50) NOT NULL,
FILM_ID INTEGER NOT NULL,
TITLE VARCHAR(60) NOT NULL
);

CREATE TABLE  FILM_RENTAL
(
FIRST_NAME VARCHAR (50) NOT NULL,
LAST_NAME VARCHAR (50) NOT NULL,
CUSTOMER_ID CHAR(10) PRIMARY KEY NOT NULL,
AMOUNT VARCHAR  NOT NULL,
CODE_NO INTEGER 
);

CREATE TABLE  FILM_RENTAL(
	
FIRST_NAME VARCHAR (50) NOT NULL,
LAST_NAME VARCHAR (50) NOT NULL,
CUSTOMER_ID CHAR(10) PRIMARY KEY NOT NULL,
AMOUNT VARCHAR  NOT NULL,
CODE_NO INTEGER 
);


--	INSERT INTO TABLES
INSERT INTO FILM_CHOICE(CUSTOMER_ID, FIRST_NAME, LAST_NAME, ADDRESS, FILM_ID, TITLE)
VALUES (01,'CHUKS','OKORO','LAGOS','001','GRACE'),
        (02,'FELIX','SAMUEL','ABIA','003', 'DANCING'),
        (03,'CHICHI','SANDRA','ENUGU', '004','THE FOOD');
	   
--DROP TABLE
DROP TABLE FILM_RENTAL;

--DELETE COLUMN
DELETE FROM FILM_CHOICE
WHERE FIRST_NAME = 'CHUKS';

	   
--CREATING TEMPORARY TABLES
CREATE TEMPORARY TABLE TOP_PAYMENTS AS
(
SELECT *
FROM PAYMENT
LIMIT 20
);

-- FILTERING TECHNIQUES
--WHERE STATEMENT
SELECT *
FROM PAYMENT
WHERE AMOUNT >= 3;

SELECT *
FROM PAYMENT
WHERE AMOUNT <> 3;

SELECT *
FROM INVENTORY
WHERE STORE_ID = 2;

SELECT *
FROM RENTAL
WHERE RETURN_DATE Is NULL;

SELECT *
FROM PAYMENT
WHERE AMOUNT BETWEEN 1 AND 5;

--IN OPERATOR
SELECT *
FROM PAYMENT
WHERE AMOUNT IN (0.99,2.99,4.99);

--OR OPERATOR
SELECT *
FROM CUSTOMER
WHERE FIRST_NAME = 'Ronald' OR FIRST_NAME  = 'Austin';

SELECT *
FROM RENTAL 
WHERE CUSTOMER_ID = 549 OR CUSTOMER_ID = 484;

--OR WITH AND OPERATOR
SELECT PAYMENT_ID, STAFF_ID, AMOUNT, PAYMENT_DATE
FROM PAYMENT
WHERE PAYMENT_ID = 28059 OR PAYMENT_ID = 21040
AND STAFF_ID = 2;

SELECT *
FROM CUSTOMER
WHERE LAST_NAME = 'Ford' OR LAST_NAME = 'Rogers'
AND ACTIVEBOOL = 'TRUE';

--NOT OPERATOR
SELECT *
FROM ADDRESS
WHERE NOT DISTRICT = 'Alberta' AND NOT DISTRICT = 'Florida';

SELECT RENTAL_ID, CUSTOMER_ID, RETURN_DATE, LAST_UPDATE
FROM RENTAL
WHERE NOT CUSTOMER_ID = 222 AND CUSTOMER_ID = 484;

--WILDCARDS

--LIKE STATEMENT [BEGININNG, ENDING, INBETWEEN]
--BEGININNG
SELECT FIRST_NAME, LAST_NAME, EMAIL, ADDRESS_ID
FROM CUSTOMER
WHERE FIRST_NAME LIKE 'B%';

--ENDING
SELECT FIRST_NAME, LAST_NAME, EMAIL, ADDRESS_ID
FROM CUSTOMER
WHERE FIRST_NAME LIKE '%er';

--INBETWEEN
SELECT FIRST_NAME, LAST_NAME, EMAIL, ADDRESS_ID
FROM CUSTOMER
WHERE LAST_NAME LIKE '%D%';

SELECT FIRST_NAME, LAST_NAME, EMAIL, ADDRESS_ID
FROM CUSTOMER
WHERE EMAIL LIKE 'c%@sakilacustomer.org';

--LIKE STATEMENT
--UNDERSCORE[BEGININNG]
SELECT FIRST_NAME, LAST_NAME, EMAIL, ADDRESS_ID
FROM CUSTOMER
WHERE LAST_NAME LIKE 'C__';

--LIKE STATEMENT
--UNDERSCORE[ENDING]
SELECT FIRST_NAME, LAST_NAME, EMAIL, ADDRESS_ID
FROM CUSTOMER
WHERE FIRST_NAME LIKE '__ria';

--ORDER BY [ASCENDING]
SELECT *
FROM PAYMENT
ORDER BY CUSTOMER_ID ASC;

SELECT RENTAL_ID, RENTAL_DATE, INVENTORY_ID, CUSTOMER_ID, RETURN_DATE
FROM RENTAL
ORDER BY RENTAL_DATE ASC;

SELECT *
FROM ACTOR
WHERE FIRST_NAME LIKE 'P%'
ORDER BY FIRST_NAME ASC;

--ORDER BY [DESCENDING]
SELECT *
FROM ACTOR
ORDER BY LAST_NAME DESC;

SELECT *
FROM RENTAL
ORDER BY INVENTORY_ID DESC;

SELECT FIRST_NAME, LAST_NAME, EMAIL
FROM CUSTOMER
where LAST_NAME LIKE 'C%'
ORDER BY FIRST_NAME DESC;


--ORDER BY [MULTIPLE COLUMNS]
SELECT FIRST_NAME, LAST_NAME, EMAIL, ADDRESS_ID
FROM CUSTOMER
ORDER BY FIRST_NAME ASC , ADDRESS_ID DESC;


SELECT *
FROM RENTAL 
ORDER BY CUSTOMER_ID DESC, INVENTORY_ID ASC;

--AGGREGRATE FUNCTIONS [SUM, AVG, COUNT, MIN, MAX]

--SUM FUNCTION
SELECT SUM(AMOUNT) AS TOTAL_PAYMENT
FROM PAYMENT;

--AVERAGE FUNCTION
SELECT AVG(AMOUNT)
FROM PAYMENT;

SELECT AVG(FILM_ID) AS AVERAGE_fILM_ID
FROM FILM;

--COUNT FUNCTION
SELECT COUNT(AMOUNT) AS NO_OF_PAYMENTS
FROM PAYMENT;

SELECT COUNT(TITLE) AS NO_OF_TITLE
FROM FILM;

SELECT COUNT(NULL) AS NULL_PAYMENTS
FROM PAYMENT;

--COUNT DISTINCT
SELECT COUNT(DISTINCT AMOUNT)
FROM PAYMENT;

SELECT COUNT(DISTINCT RENTAL_DATE) AS AMOUNT_OF_RENTALS
FROM RENTAL;


--MINIMUM FUNCTION
SELECT MIN(AMOUNT) AS  MINIMUM_PAYMENT
FROM PAYMENT;

SELECT MIN(CUSTOMER_ID) AS MINIMUM_CUSTOMER_ID
FROM RENTAL;

--MAXIMUM FUNCTION
SELECT MAX(AMOUNT) AS MAXIMUM_PAYMENT
FROM PAYMENT;

SELECT(INVENTORY_ID) AS MAXIMUM_INVENTORY_ID
FROM RENTAL;

--GROUP BY STATEMENT
SELECT CUSTOMER_ID, SUM(AMOUNT) AS TOTAL_PAYMENT
FROM PAYMENT
GROUP BY CUSTOMER_ID;

SELECT CUSTOMER_ID, MAX(AMOUNT) AS MAXIMUM_AMOUNT
FROM PAYMENT
GROUP BY CUSTOMER_ID;

SELECT CUSTOMER_ID, AVG(AMOUNT) AS AVERAGE_PAYMENT
FROM PAYMENT
GROUP BY CUSTOMER_ID;

SELECT RATING, COUNT(FILM)
FROM FILM
GROUP BY RATING;

--HAVING STATEMENT
SELECT CUSTOMER_ID, SUM(AMOUNT)
FROM PAYMENT
GROUP BY CUSTOMER_ID
HAVING SUM(AMOUNT) > 200;

SELECT RATING, AVG(RENTAL_RATE)
FROM FILM
GROUP BY RATING
HAVING AVG(RENTAL_RATE) > 3;

--AS STATEMENT
SELECT DISTINCT COUNT(AMOUNT) AS COUNT_OF_PAYMENT
FROM PAYMENT;

SELECT DISTINCT CUSTOMER_ID AS CUSTOMER_ID_PAYMENT
FROM PAYMENT;

SELECT COUNT(TITLE) AS NO_OF_TITLES
FROM FILM;

SELECT FIRST_NAME, LAST_NAME, EMAIL, ADDRESS_ID, STAFF_ID, AMOUNT
FROM CUSTOMER AS C INNER JOIN PAYMENT AS P
ON C.CUSTOMER_ID = P.CUSTOMER_ID;

SELECT EMAIL, ADDRESS_ID, AMOUNT, PAYMENT_ID, RENTAL_DATE, RETURN_DATE
FROM ((CUSTOMER AS C INNER JOIN PAYMENT AS P
ON C.CUSTOMER_ID = P.CUSTOMER_ID)
INNER JOIN RENTAL AS R ON R.RENTAL_ID = p.rental_id);


--UNIONS
SELECT STORE_ID, ADDRESS_ID 
FROM STORE
UNION
SELECT STAFF_ID, ADDRESS_ID 
FROM STAFF
ORDER BY STORE_ID ASC;

--UNION ALL
SELECT STORE_ID, ADDRESS_ID 
FROM STORE
UNION ALL
SELECT STAFF_ID, ADDRESS_ID 
FROM STAFF;

--SUBQUERIES
SELECT *
FROM CUSTOMER
WHERE CUSTOMER_ID IN(SELECT CUSTOMER_ID
FROM PAYMENT
WHERE AMOUNT = 6.99);

SELECT CUSTOMER_ID, FIRST_NAME, LAST_NAME, EMAIL
FROM CUSTOMER
WHERE CUSTOMER_ID IN (SELECT CUSTOMER_ID 
FROM RENTAL
WHERE STAFF_ID = 2);


--JOINS [INNER JOIN, LEFT JOIN, RIGHT JOIN, FULL JOIN]

--INNER JOIN
SELCT FIRST_NAME, LAST_NAME, EMAIL, ADDRESS_ID, STAFF_ID, AMOUNT
FROM CUSTOMER INNER JOIN PAYMENT
ON CUSTOMER.CUSTOMER_ID = PAYMENT.CUSTOMER_ID;

SELECT CUSTOMER.CUSTOMER_ID, EMAIL, ADDRESS_ID, RENTAL_ID, RENTAL_DATE, INVENTORY_ID, RETURN_DATE, STAFF_ID
FROM CUSTOMER INNER JOIN RENTAL
ON CUSTOMER.CUSTOMER_ID = RENTAL.CUSTOMER_ID;

--INNER JOIN [MULITPLE TABLES]
SELECT EMAIL, ADDRESS_ID, AMOUNT, PAYMENT_ID, RENTAL_DATE, RETURN_DATE
FROM ((CUSTOMER INNER JOIN PAYMENT
ON CUSTOMER.CUSTOMER_ID = PAYMENT.CUSTOMER_ID)
INNER JOIN RENTAL ON RENTAL.RENTA_ID = PAYMENT.RENTAL_ID);


SELECT INVENTORY_ID, STORE_ID, INVENTORY.FILM_ID, INVENTORY.LAST_UPDATE, TITLE, DESCRIPTION, ACTOR_ID
FROM INVENTORY INNER JOIN FILM 
ON INVENTORY.FILM_ID = FILM.FILM_ID
INNER JOIN FILM_ACTOR ON FILM_ACTOR.FILM_ID = FILM.FILM_ID;

--LEFFT JOIN
SELECT FIRST_NAME, LAST_NAME, EMAIL, STORE.STORE_ID, USERNAME, MANAGER_STAFF_ID
FROM STAFF LEFT JOIN STORE
ON STAFF.STORE_ID = STORE.STORE_ID
ORDER BY STORE_ID;

SELECT CATEGORY.CATEGORY_ID, NAME, FILM_ID, FILM_CATEGORY.LAST_UPDATE
FROM CATEGORY LEFT JOIN FILM_CATEGORY
ON CATEGORY.CATEGORY_ID = FILM_CATEGORY.CATEGORY_ID;

--RIGHT JOIN
SELECT CITY_ID, CITY, CITY.COUNTRY_ID, CITY.LAST_UPDATE, COUNTRY
FROM CITY RIGHT JOIN COUNTRY
ON CITY.COUNTRY_ID = COUNTRY.COUNTRY_ID;

--FULL JOIN
SELECT *
FROM COUNTRY FULL JOIN PAYMENT
ON COUNTRY.CUSTOMER_ID = PAYMENT.CUSTOMER_ID;

SELECT TITLE, DESCRIPTION, RELEASE_YEAR, RENTAL_DURATION, LANGUAGE.LANGUAGE_ID, NAME, LANGUAGE.LAST_UPDATE
FROM FILM FULL JOIN LANGUAGE
ON FILM.LANGUAGE_ID = LANGUAGE.LANGUAGE_ID;














