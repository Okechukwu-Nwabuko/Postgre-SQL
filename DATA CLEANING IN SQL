--USING SQL FUNCTIONS TO CLEAN DATA:

--CREATE CUSTOMERS TABLE:
CREATE TABLE CUSTOMERS(
   CUSTOMER_ID CHAR(8) PRIMARY KEY,
	BRACKET_CUST_ID CHAR(10),
   CUSTOMER_NAME VARCHAR(255),
   SEGMENT VARCHAR(255),
    AGE INT,
	COUNTRY VARCHAR(255),
	CITY VARCHAR(255),
	STATE VARCHAR(255),
    POSTAL_CODE INT,
	REGION VARCHAR(255)
);

--CREATE SALES TABLE:
CREATE TABLE SALES(
   ORDER_LINE INT,
	ORDER_ID VARCHAR(255),
	ORDER_DATE DATE,
	SHIP_DATE DATE,
    SHIP_MODE VARCHAR(255),
    CUSTOMER_ID CHAR(8),
	PRODUCT_ID VARCHAR(255),
	SALES DECIMAL(10,5),
	QUANTITY INT,
    DISCOUNT DECIMAL(4,2),
	PROFIT DECIMAL(10,5)
);

--RETRIEVE DATA FROM CUSTOMERS & SALES TABLES:
SELECT *
FROM CUSTOMERS;

SELECT *
FROM SALES;

--FIND THE LENGTH OF THE FIRST_NAME OF MALE EMPLOYEES:
SELECT FIRST_NAME, LENGTH(FIRST_NAME) AS CHARACTER_LENGTH
FROM EMPLOYEES
WHERE GENDER = 'M'
ORDER BY FIRST_NAME;

--FIND THE LENGTH OF THE FIRST_NAME OF MALE EMPLOYEES WHERE THE LENGTH OF FIRST_NAME IS > 5:
SELECT FIRST_NAME, LENGTH(FIRST_NAME) AS CHARACTER_LENGTH
FROM EMPLOYEES
WHERE GENDER = 'M' AND LENGTH(FIRST_NAME) > 5
ORDER BY CHARACTER_LENGTH;

--RETRIEVE LIST OF CUSTOMER GROUP OF ALL CUSTOMERS:
SELECT CUSTOMER_ID, LEFT(CUSTOMER_ID, 2) AS CUSTOMER_GROUP
FROM CUSTOMERS;

--RETRIEVE LIST OF CUSTOMER NUMBER OF ALL CUSTOMERS:
SELECT CUSTOMER_ID, RIGHT(CUSTOMER_ID, 5) AS CUSTOMER_NO
FROM CUSTOMERS
ORDER BY CUSTOMER_NO;

--RETRIEVE LENGTH OF CUSTOMER_ID COLUMN:
SELECT CUSTOMER_ID, LENGTH(CUSTOMER_ID)
FROM CUSTOMERS;

--UPPERCASE & LOWERCASE:
--UPPERCASE:
SELECT UPPER(CUSTOMER_NAME) AS CUSTOMER_NAME, UPPER(SEGMENT) AS SEGMENT, UPPER(COUNTRY) AS COUNTRY
FROM CUSTOMERS
ORDER BY CUSTOMER_NAME ASC;

--LOWERCASE:
SELECT LOWER(CUSTOMER_NAME) AS CUSTOMER_NAME, LOWER(STATE) AS STATE, LOWER(SEGMENT) AS SEGMENT
FROM CUSTOMERS
ORDER BY STATE DESC;

--REPLACING VALUES:
--REPLACE M TO MALE IN THE GENDER COLUMN OF EMPLOYEES TABLE:
SELECT FIRST_NAME, LAST_NAME, GENDER, REPLACE(GENDER, 'M','MALE') AS EMPLOYEE_GENDER
FROM EMPLOYEES;

--REPLACE 'F' TO 'FEMALE' IN THE GENDER COLUMN OF EMPLOYEES TABLE:
SELECT FIRST_NAME, LAST_NAME, GENDER, REPLACE(GENDER, 'F','FEMALE') AS EMPLOYEE_GENDER
FROM EMPLOYEES;

--REPLACE 'United States' TO 'US' IN COUNTRY COLUMN OF CUSTOMERS TABLE:
SELECT CUSTOMER_NAME, SEGMENT,COUNTRY, REPLACE(COUNTRY, 'United States', 'US') AS NEW_COUNTRY
FROM CUSTOMERS
ORDER BY CUSTOMER_NAME;

-- USING TRIM, RTRIM, LTRIM FUNCTIONS:
--TRIM FUNCTION:
SELECT TRIM(' COUNTRY ') 
FROM CUSTOMERS;

--RIGHT TRIM FUNCTION:
SELECT  RTRIM (' EMP_NO ')
FROM EMPLOYEES;

--LEFT TRIM FUNCTION:
SELECT  LTRIM (' EMP_NO ')
FROM EMPLOYEES;

--REMOVE BRACKETS FROM CUSTOMER_ID IN THE BRACKET_CUST_ID COLUMN:
SELECT BRACKET_CUST_ID, TRIM(BRACKET_CUST_ID, '()') AS NEW_BRACKET_CUST_ID
FROM CUSTOMERS
ORDER BY NEW_BRACKET_CUST_ID ASC;

--CONCATENATE FUNCTION:
--CREATE A COLUMN CALLED FULL_NAME FROM FIRST_NAME & LAST_NAME OF EMPLOYEES:
SELECT EMP_NO, BIRTH_DATE, FIRST_NAME, LAST_NAME, FIRST_NAME||'  ' ||LAST_NAME AS FULL_NAME
FROM EMPLOYEES
ORDER BY FULL_NAME ASC;

--CREATE A COLUMN CALLED ADDRESS FROM CITY, STATE & COUNTRY  OF CUSTOMERS:
SELECT CUSTOMER_ID, CUSTOMER_NAME, CITY, STATE, COUNTRY, CITY||' , '||STATE||' , '||COUNTRY AS ADDRESS
FROM CUSTOMERS
ORDER BY CUSTOMER_ID ASC;

--CREATE A COLUMN CALLED FROM CUSTOMERS_DETAILS FROM NAME & AGE:
SELECT CUSTOMER_ID,UPPER(CUSTOMER_NAME), AGE, UPPER(CUSTOMER_NAME)||'  '||'IS'||'  '||AGE||'  '||'YEARS'||'  '||'OLD' as CUSTOMER_DETAILS
FROM CUSTOMERS
ORDER BY AGE DESC;

--SUBSTRING FUNCTION:
--RETRIEVE  ID's, NAMES, SEGMENT & GROUPS OF CUSTOMERS:
SELECT CUSTOMER_ID, CUSTOMER_NAME, SEGMENT,
SUBSTRING(CUSTOMER_ID FOR 2) AS CUSTOMER_GROUP
FROM CUSTOMERS
ORDER BY CUSTOMER_GROUP;

--RETRIEVE CUSTOMER_ID, CUSTOMER_NAME , SEGMENT & CUSTOMER_GROUP, FOR CUSTOMER GROUP = 'AB':
SELECT CUSTOMER_ID, CUSTOMER_NAME, SEGMENT,
SUBSTRING(CUSTOMER_ID FOR 2) AS CUSTOMER_GROUP
FROM CUSTOMERS
WHERE SUBSTRING(CUSTOMER_ID FOR 2) = 'AB';

--RETRIEVE CUSTOMER_ID, CUSTOMER_NAME , SEGMENT & CUSTOMER_NUMBER, FOR CUSTOMER GROUP = 'AB':
SELECT CUSTOMER_ID, CUSTOMER_NAME, SEGMENT,
SUBSTRING(CUSTOMER_ID FROM 4 FOR 5) AS CUSTOMER_NO
FROM CUSTOMERS
WHERE SUBSTRING(CUSTOMER_ID FOR 2) = 'AB';

--RETRIEVE THE YEAR OF BIRTH FOR ALL EMPLOYEES:
SELECT EMP_NO, BIRTH_DATE,
SUBSTRING(CAST(BIRTH_DATE AS CHAR(10)) FOR 4 )AS YEAR
FROM EMPLOYEES
ORDER BY EMP_NO;

--RETRIEVE THE MONTH OF BIRTH FOR ALL EMPLOYEES:
SELECT EMP_NO, BIRTH_DATE,
SUBSTRING(CAST(BIRTH_DATE AS CHAR(10)) FROM 6 FOR 2 )AS MONTH
FROM EMPLOYEES
ORDER BY EMP_NO;

--RETRIEVE THE DAY OF BIRTH FOR ALL EMPLOYEES:
SELECT EMP_NO, BIRTH_DATE,
SUBSTRING(CAST(BIRTH_DATE AS CHAR(10)) FROM 9 FOR 2 )AS DAY
FROM EMPLOYEES
ORDER BY EMP_NO;

--COALESCE FUNCTION [USE COALESCE TO FILL NULL VALUES WITH ACTUAL VALUES]:

--REPLACE MISSING DEPARTMENT TO 'NO DEPARTMENT NUMBER' & MISSING DEPARTMENT NAME TO 'NO DEPARTMENT NAME':
SELECT DEPT_NO, DEPT_NAME,
COALESCE(DEPT_NO, 'NO DEPARTMENT NUMBER') AS NEW_DEPT_NO,
COALESCE(DEPT_NAME, 'NO DEPARTMENT NAME') AS NEW_DEPT_NAME
FROM DEPARTMENTS_DUP
ORDER BY DEPT_NO;

--REPLACE A NULL COUNTRY, STATE & CITY WITH 'NO ADDRESS':
--NO_ADDRESS COLUMN[COUNTRY]:
SELECT CUSTOMER_ID, CUSTOMER_NAME, COUNTRY, STATE, CITY,
COALESCE (COUNTRY, STATE, CITY, 'NO ADDRESS') AS CUSTOMER_ADDRESS
FROM CUSTOMERS
ORDER BY CUSTOMER_ADDRESS;

--REPLACE A NULL STATE, CITY & COUNTRY WITH 'NO ADDRESS':
--NO_ADDRESS COLUMN[STATE]:
SELECT CUSTOMER_ID, CUSTOMER_NAME, COUNTRY, CITY, STATE,
COALESCE (STATE, CITY, COUNTRY, 'NO ADDRESS') AS CUSTOMER_ADDRESS
FROM CUSTOMERS
ORDER BY CUSTOMER_ADDRESS;

--REPLACE A NULL COUNTRY & CITY WITH 'NO ADDRESS':
--NO_ADDRESS COLUMN[COUNTRY]:
SELECT CUSTOMER_ID, CUSTOMER_NAME, COUNTRY, CITY,
COALESCE (COUNTRY, CITY, 'NO ADDRESS') AS CUSTOMER_ADDRESS
FROM CUSTOMERS
ORDER BY CITY;

--CASE STATEMENT:
SELECT CUSTOMER_ID, CUSTOMER_NAME, SEGMENT, AGE, CITY, STATE,
CASE
    WHEN COUNTRY = 'United States' THEN 'US'
	END
FROM CUSTOMERS;

SELECT ORDER_ID, ORDER_DATE, SHIP_DATE, CUSTOMER_ID, PRODUCT_ID, CATEGORY,SUB_CATEGORY, SALES,
CASE
    WHEN SALES > 500 THEN 'GRADE A'
	WHEN SALES = 500  OR SALES  > 300 THEN 'GRADE B'
    WHEN SALES = 300  OR SALES < 300 THEN 'GRADE C'
	END AS SALES_GRADE
FROM SALES
ORDER BY SALES DESC;

